背景
由于业务开发的不规范导致性能问题比较严重，所以也需要对业务层的优化点进行整理

主要现状
内存占用大
dc过高
游戏包体积未优化

解决方案：

1、游戏中label字体过度使用，除了玩家姓名和聊天外，所有可控字数的字体改为bmpfont。统计常用字体进行模块化，对狼人杀优化字体后可降低平均20左右dc	
 
2、项目存在部分碎图，整理模块碎图到一个文件夹中创建 autoAtlas，打自动图集的时候选择合适的最大宽度和最大高度。查找碎图片进行autoAtlas，同一个模块用同一张贴图后dc明显降低	
 
3、项目存在可替代的9宫格，合图时九宫格会打断dc,除特殊背景外减少9宫格使用
目前测试9宫格尚未打断dc暂时不做	，可以暂时不对九宫格优化	
 
4、存在alpha混合，检查需要进行混合资源的必要性，可替换成让美术线下处理好
统一使用 SRC_ALPHA ONE_MINUS_SRC_ALPHA，尽量统一用使用一种混合算法，可节省性能	
 

5、部分spine存在预乘，去掉spine预乘，premultipliedAlpha设置为false可避免pngquant压图后产生的色块，可节省cpu性能	
 
6、自定义shader查看使用效率和必要性	

7、 mask任意使用，查看mask使用的合理性，是否可替换使用shader代替mask裁剪进行替可大幅度降低dc被打断	
 

8、纹理资源存在超过2048X2048，需要美术配合，将过大的图片资源进行拆分


9、存在label和sprite层级交错，减少label和sprite层级嵌套，尽量改成平级没有层级逻辑关系的组建按类型排列
 

10、存在程序设置字体颜色，把需要的字体颜色图片用美术工具提前处理好，或打成合图


11、存在程序设置透明图片，使用自带透明通道的图片替换，减少管线计算	
 

12、resource里面存在不用的图片，将resource中不用的资源进行清除，打包时候resource中图片会直接进包


 
13、图片资源过大无优化，采用pngquant进行压缩，在JenKins打包工 具中加入是否压图 选项，选择压图选择打包出体积较小的资源包，注意需 要spine去掉预乘，对所有项目进行体积压缩很有帮助 


14、存在cocos引擎无用的模块，打包时候将模块勾选 参数暴露给jenkins去设置


15、全部纹理存在RGBA8888，对图片使用 RGBA4444格式，对出现失真的图片进行抖动算法替换


16、大量静态加载资源和prefab优化代码，把prefab或一些图片采用动态加载，来减少初始化占用内存


17、有代码消息传递层次过多现象，减少过多的消息传 递，消息传递尽量只传一层


18、对ios资源使用pvr.ccz
可选

 
19、过多log打印,即使线上会屏蔽方体，但是参数计算也占用资源删除不用的 console.log,尤其是带 JSON.stringfly


20、富文本组件使用，去掉富文本组件，去掉富文本用普通文本代替，可避免dc被打断	
 

21、mp3未优化，对游戏音效进行优化，对于一般背景音乐控制到800k左右，音频文件采样率在96-128kbps,比特率44khz	


 
